// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id
  name          String
  email         String
  role          Role          @default(user)
  banned        Boolean       @default(false)
  bannedReason  String?
  banExpiresAt  DateTime?
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  // Subscription
  subscription  Subscription?

  // Relationships
  threads   Thread[]
  documents Document[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  impersonatedBy String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Thread {
  id        String     @id @default(cuid())
  title     String
  userId    String
  type      ThreadType @default(conversation)
  messages  Message[]
  metadata  Json?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, updatedAt(sort: Desc)])
  @@map("chats")
}

model Message {
  id              String       @id @default(cuid())
  content         String       @db.Text
  threadId        String
  thread          Thread       @relation(fields: [threadId], references: [id], onDelete: Cascade)
  parentMessageId String?
  parentMessage   Message?     @relation("ParentMessage", fields: [parentMessageId], references: [id], onDelete: Cascade)
  attachments     Attachment[]
  role            MessageRole  @default(user)
  createdAt       DateTime     @default(now())
  childrenMessage Message[]    @relation("ParentMessage")

  @@map("messages")
}

enum MessageRole {
  user
  assistant
  system
  tool
}

model Attachment {
  id        String  @id @default(cuid())
  messageId String
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  url       String
  type      String

  @@map("attachments")
}

model Document {
  id        String   @id @default(cuid())
  userId    String
  filename  String
  fileType  String
  fileSize  Int
  content   String?
  analysis  Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Subscription {
  id        String             @id @default(cuid())
  userId    String             @unique
  status    SubscriptionStatus
  plan      String
  stripeId  String?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum Role {
  user
  admin
}

enum ThreadType {
  conversation
  diagnostic
  document_analysis
}

enum SubscriptionStatus {
  active
  inactive
  cancelled
}
